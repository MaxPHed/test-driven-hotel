Reflektion:
Jag bestämde ganska snabbt en grundläggande arkitektur för projektet med vilka lager och hur modellerna skulle se ut.
Valet att göra lägga RoomManager som en dependency injection visade sig vara smidigt, då i stort sett all logik utgår ifrån den klassen. I mina modeller var tanken att varje rum skulle ha en lista med bokningar, och varje bokning skulle representera ett datum. Så om jag gjorde en bokning över flera dagar skulle det läggas in flera bokningar på det rummet. Det visade sig vara ett smidigt sätt så länge jag bara ville göra bokningar. När jag däremot lade till användarberättelsen om att jag ville kunna söka upp bokningar igen blev det lite svårare, då varje bokning inte hade någon annan information än ett datum och en referens. Lösningen blev att varje booking även skulle kunna ta en variabeln Room igen vilket underlättade återgivningen av vad som fanns sparat. Nackdelen där är att det är teoretiskt möjligt att det blir en oändlig loop med Room och Booking om man skriver något i Bookings variabel Room. Den variabeln kan därför bara nås utifrån klassen och inte skrivas.

Ett annat designval som jag gjorde tidigt som senare kom att blir problematiskt var min huvudsakliga bokningsmetod "BookRoomById". Jag tänkte att den skulle nås via interfacet och att det då var smidigt att den returnerade en sträng med hur bokningen gick. Lite senare insåg jag att jag kanske vill nå vad för typ jag bokat, och inte minst att jag ville återge referensen, vilket såklart innebar att det hade varit enklare att bara återge rummet till UI lagret där rumstyp och referens finns. Jag ville även komma ifrån att UI-delen valde vilken ID på rummet då det blev mindre intressant och lägga den logiken i Businesslagret istället. Alla mina tester hade då behövt skrivas om så jag bestämde mig för att lösa det genom en metoden BookRoom som där bestämmer vilket ID som ska bokas. Jag la även till att BookRoomById inkluderar referensen för rummet i strängen.

Något jag brottades med ett tag var var nånstans jag skulle dra gränsen mellan JavaScript och Razor C# i UI lagret då jag märkte att vissa saker inte var helt smidigt i C#. Jag bestämde mig för att försöka göra all logik i UI-lagret i JS, men insåg ganska fort att det skulle bli en hel del kod att skriva om. Inlämningsuppgiften hade ju inga krav på hur saker såg ut, så jag bestämde mig för att lägga tid på andra saker istället. Nackdelen nu är att jag får anropa servern oftare än vad jag velat. Hade jag fått göra om projektet hade jag nog velat skriva all interaktion i JS, och vara använda C# de gånger serveranrop behövs, och försöka spara så mycket variabler som möjligt i konsollen. Jag tror det hade blivit en smidigare och mer användarvänlig sida.

Variabler som jag ville ha kvar på sidan mellan sidladdningar sparade jag som sessionExtensions vilket fungerade relativt smidigt. Utan att ha testat skulle jag tro att den stora nackdelen med det i min webbappliaktion är att de inte är användarespecifika, utan blir statiska för appen. Så skulle webappen användas av flera användare samtidigt skulle de nog få en rätt usel användarupplevelse.